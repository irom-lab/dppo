defaults:
  - _self_
hydra:
  run:
    dir: ${logdir}
_target_: agent.eval.eval_gaussian_agent.EvalGaussianAgent

name: ${env_name}_eval_gaussian_mlp_ta${horizon_steps}
logdir: ${oc.env:DPPO_LOG_DIR}/robomimic-eval/${name}/${now:%Y-%m-%d}_${now:%H-%M-%S}_${seed}
base_policy_path:
robomimic_env_cfg_path: cfg/robomimic/env_meta/${env_name}.json
normalization_path: ${oc.env:DPPO_DATA_DIR}/robomimic/${env_name}/normalization.npz

seed: 42
device: cuda:0
env_name: square
obs_dim: 23
action_dim: 7
cond_steps: 1
horizon_steps: 1
act_steps: 1

n_steps: 400  # each episode takes max_episode_steps / act_steps steps
render_num: 0

env:
  n_envs: 50
  name: ${env_name}
  best_reward_threshold_for_success: 1
  max_episode_steps: 400
  save_video: False
  wrappers:
    robomimic_lowdim:
      normalization_path: ${normalization_path}
      low_dim_keys: ['robot0_eef_pos',
                    'robot0_eef_quat',
                    'robot0_gripper_qpos',
                    'object'] # same order of preprocessed observations
    multi_step:
      n_obs_steps: ${cond_steps}
      n_action_steps: ${act_steps}
      max_episode_steps: ${env.max_episode_steps}
      reset_within_step: True

model:
  _target_: model.common.gaussian.GaussianModel
  randn_clip_value: 3
  #
  network_path: ${base_policy_path}
  network:
    _target_: model.common.mlp_gaussian.Gaussian_MLP
    mlp_dims: [1024, 1024, 1024]
    activation_type: ReLU
    use_layernorm: true
    fixed_std: 0.1
    cond_dim: ${eval:'${obs_dim} * ${cond_steps}'}
    horizon_steps: ${horizon_steps}
    
  horizon_steps: ${horizon_steps}
  device: ${device}